{-# LANGUAGE ForeignFunctionInterface #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
module HaskadesBinding (haskadesRun, emit) where

import Foreign.C.Types
import Foreign.C.String
import Foreign.Ptr
import System.Exit (exitWith, ExitCode(ExitFailure))
import Control.Monad (when, ap, join)
import Control.Monad.IO.Class (MonadIO, liftIO)
import Data.Time.Clock.POSIX (posixSecondsToUTCTime, utcTimeToPOSIXSeconds)
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Data.Text.Lazy as LText
import qualified Data.Text.Lazy.Encoding as LText
import qualified Data.ByteString as ByteString

import {{modul}}

foreign import ccall safe "haskades_run.cpp haskades_run"
	c_haskades_run ::
	CString -> {{#slots}}FunPtr ({{#args}}{{ctype}} -> {{/args}} {{crtype}}) -> {{/slots}}
	IO CInt

foreign import ccall unsafe "start.cpp emit_CustomSignalEvent"
	c_emit_CustomSignalEvent ::
	CInt -> {{#signalTypes}}{{csigtype}} -> {{/signalTypes}}
	IO ()

emit :: (MonadIO m) => Signal -> m ()
{{#signals}}
emit ({{signame}} {{#sigargs}}{{siganame}} {{/sigargs}}) = liftIO (
		({{sigcwrap}})
		(c_emit_CustomSignalEvent {{sigevent}})
	)
{{/signals}}

-- Function pointer wrappers
{{#slots}}
foreign import ccall "wrapper" wrap_{{name}} :: ({{#args}}{{ctype}} -> {{/args}} {{crtype}}) -> IO (FunPtr ({{#args}}{{ctype}} -> {{/args}} {{crtype}}))
{{/slots}}

haskadesRun :: (MonadIO m) => String -> Slots -> m ()
haskadesRun qmlPath (Slots {{#slots}}{{name}} {{/slots}}) = liftIO $ do
{{#slots}}
	{{name}}Ptr <- wrap_{{name}} ({{#hasArgs}}\{{/hasArgs}}{{#args}}{{aname}} {{/args}}{{#hasArgs}}-> {{/hasArgs}}(join ((return {{monadic}}) {{#args}} `ap` {{cwrap}}{{/args}})) >>= {{crwrap}})
{{/slots}}

	code <- ByteString.useAsCString (Text.encodeUtf8 $ Text.pack qmlPath) (\qmlPath ->
			c_haskades_run qmlPath {{#slots}}{{name}}Ptr {{/slots}}
		)

{{#slots}}
	freeHaskellFunPtr {{name}}Ptr
{{/slots}}

	when (code /= 0) (exitWith $ ExitFailure $ fromIntegral code)
	return ()
