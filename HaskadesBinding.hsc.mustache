{-# LANGUAGE ForeignFunctionInterface #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
module HaskadesBinding (
#ifdef USE_SENSORS
	AccelerationMode,
	AxesOrientationMode,
	accelerometerStart,
#endif
	haskadesRun,
	emit,
	popSignalFromUI
) where

#include "{{headerPath}}"

import Control.Applicative (pure, (<*>))
import Control.Monad (when, ap, join)
import Control.Monad.IO.Class (MonadIO, liftIO)
import System.Exit (exitWith, ExitCode(ExitFailure))

import Foreign.Storable
import Foreign.C.Types
import Foreign.C.String
import Foreign.Ptr

import Data.Time.Clock (UTCTime)
import Data.Time.Clock.POSIX (posixSecondsToUTCTime, utcTimeToPOSIXSeconds)
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Data.Text.Lazy as LText
import qualified Data.Text.Lazy.Encoding as LText
import qualified Data.ByteString as ByteString

import {{modul}}

foreign import ccall safe "haskades_run.cpp haskades_run"
	c_haskades_run ::
	CString ->
	-- ^ QML file to load and render
	IO CInt

foreign import ccall unsafe "haskades_run.cpp emit_ToUIEvent"
	c_emit_ToUIEvent ::
	CInt -> {{#toUItypes}}{{csigtype}} -> {{/toUItypes}}
	IO ()

foreign import ccall safe "haskades_run.cpp pop_SignalFromUI"
	c_pop_SignalFromUI ::
	IO (Ptr SignalFromUI)

emit :: (MonadIO m) => SignalToUI -> m ()
{{#toUI}}
emit ({{signame}} {{#sigargs}}{{siganame}} {{/sigargs}}) = liftIO (
		{{#sigcwrap}}({{sigcwrap}}){{/sigcwrap}}
		(c_emit_ToUIEvent {{sigevent}})
	)
{{/toUI}}

popSignalFromUI :: (MonadIO m) => m SignalFromUI
popSignalFromUI = liftIO (c_pop_SignalFromUI >>= peekFromUI)

peekFromUI :: Ptr SignalFromUI -> IO SignalFromUI
peekFromUI ptr = do
	tag <- #{peek struct SignalFromUI, tag} ptr
	case (tag :: CInt) of
{{#fromUI}}
		{{sigevent}} ->
			pure {{signame}}{{#sigargs}} <*> (({{sigargfromc}}) (#{peek struct SignalFromUI, {{signame}}.{{siganame}}} ptr)){{/sigargs}}

{{/fromUI}}
		_ -> error "Corrupt SignalFromUI in peekFromUI (HaskadesBinding)"

haskadesRun :: (MonadIO m) => String -> m ()
haskadesRun qmlPath = liftIO $ do

	code <- ByteString.useAsCString (Text.encodeUtf8 $ Text.pack qmlPath) (\qmlPath ->
			c_haskades_run qmlPath
		)

	when (code /= 0) (exitWith $ ExitFailure $ fromIntegral code)
	return ()

#ifdef USE_SENSORS
data AccelerationMode = AccelerationGravity | AccelerationUser | AccelerationCombined deriving (Show, Read, Eq, Enum)
data AxesOrientationMode = AxesOrientationFixed | AxesOrientationAutomatic | AxesOrientationUser deriving (Show, Read, Eq, Enum)

foreign import ccall "wrapper" _wrap_accelerometerCallback :: (CDouble -> CDouble -> CDouble -> IO CInt) -> IO (FunPtr (CDouble -> CDouble -> CDouble -> IO CInt))

foreign import ccall safe "haskades_run.cpp accelerometer_start"
	c_accelerometer_start ::
	CInt -> CInt -> FunPtr (CDouble -> CDouble -> CDouble -> IO CInt) ->
	IO ()

enumToCInt :: (Enum a) => a -> CInt
enumToCInt = fromIntegral . fromEnum

accelerometerStart :: AccelerationMode -> AxesOrientationMode -> ((Double, Double, Double) -> IO Bool) -> IO ()
accelerometerStart accelM axesM cb = _wrap_accelerometerCallback cb' >>= c_accelerometer_start (enumToCInt accelM) (enumToCInt axesM)
	where
	cb' x y z = fmap enumToCInt $ cb $! (realToFrac $! x, realToFrac $! y, realToFrac $! z)
#endif
