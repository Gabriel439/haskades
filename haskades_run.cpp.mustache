#include <QtDebug>
#include <QLocale>
#include <QTranslator>

#include <QQueue>
#include <QSemaphore>
#include <QMutex>

#include <bb/cascades/Application>
#include <bb/cascades/QmlDocument>
#include <bb/cascades/AbstractPane>

#ifdef USE_SENSORS
#include <QtSensors/QAccelerometer>
#endif

#ifdef USE_NOTIFICATIONS
#include <bb/platform/Notification>
#include <bb/platform/NotificationDialog>
#endif

#ifdef USE_INVOCATIONS
#include <bb/system/InvokeManager>
#endif

#include "{{headerPath}}"

QEvent::Type toUIEventType;

template<class T> class ThreadSafeQueue {
public:
	ThreadSafeQueue() : semFree(32), semUsed(0), valid(true) { }

	void enqueue(const T &value) {
		if(!valid) return;

		semFree.acquire(1);
		mutex.lock();
		queue.enqueue(value);
		mutex.unlock();
		semUsed.release(1);
	}

	T dequeue() {
		if(!valid) return NULL;

		semUsed.acquire(1);
		mutex.lock();
		T val = queue.dequeue();
		mutex.unlock();
		semFree.release(1);
		return val;
	}

	void stop() {
		// Stop new calls
		valid = false;

		// Make sure there is something to dequeue
		mutex.lock();
		queue.enqueue(NULL);
		mutex.unlock();

		// Allow waiting dequeue
		semUsed.release(32);

		// Allow waiting enqueue
		semFree.release(32);
	}

protected:
	bool valid;
	QQueue<T> queue;
	QSemaphore semFree;
	QSemaphore semUsed;
	QMutex mutex;
};

ThreadSafeQueue<SignalFromUI*> signalFromUIQ;

class ToUIEvent : public QEvent {

public:
	ToUIEvent(int signalEvent{{#toUItypes}}, {{qtsigtype}} {{sigtypename}}{{/toUItypes}}) : QEvent(toUIEventType) {
		this->signalEvent = signalEvent;
{{#toUItypes}}
		this->{{sigtypename}} = {{sigtypename}};
{{/toUItypes}}
	}

	int signalEvent;
{{#toUItypes}}
	{{qtsigtype}} {{sigtypename}};
{{/toUItypes}}
};

class AppWrapper: public QObject {
Q_OBJECT

public:
	// This is our constructor that sets up the recipe.
	AppWrapper(QString qml_path) : qmlPath(qml_path) {
#ifdef USE_INVOCATIONS
		connect(&this->invokeManager, SIGNAL(invoked(const bb::system::InvokeRequest&)), this, SLOT(wasInvoked(const bb::system::InvokeRequest&)));
#endif
#ifdef USE_NOTIFICATIONS
		qmlRegisterType<bb::platform::Notification>("bb.platform", 1, 0, "Notification");
		qmlRegisterType<bb::platform::NotificationDialog>("bb.platform", 1, 0, "NotificationDialog");
#endif
	}

	virtual void ready() {
		// Obtain a QMLDocument and load it into the qml variable, using build patterns.
		bb::cascades::QmlDocument *qml = bb::cascades::QmlDocument::create(this->qmlPath);

		// If the QML document is valid, we process it.
		if(!qml->hasErrors()) {
			qml->setContextProperty("app", this);

			// Create the application root from QMLDocument
			bb::cascades::AbstractPane *appPage = qml->createRootObject<bb::cascades::AbstractPane>();

			if (appPage) {
				// Set the main scene for the application to the Page.
				bb::cascades::Application::instance()->setScene(appPage);
			}
		} else {
			qCritical() << qml->errors();
		}
	}

	virtual bool event(QEvent *e) {
		if(e->type() == toUIEventType) {
			ToUIEvent *ev = (ToUIEvent*)e;
			switch(ev->signalEvent) {
{{#toUI}}
				case TOUI_{{signame}}:
					emit {{signame}}({{#sigargs}}{{^sigargfirst}}, {{/sigargfirst}}ev->{{sigargsigtypename}}{{/sigargs}});
					return true;
					break;
{{/toUI}}
			}
			return false;
		} else {
			return QObject::event(e);
		}
	}

{{#fromUI}}
	Q_INVOKABLE void {{signame}}({{#sigargs}}{{^sigargfirst}}, {{/sigargfirst}}{{qtsigargtype}} {{siganame}}{{/sigargs}}) {
		SignalFromUI *s = new SignalFromUI;
		s->tag = {{sigevent}};
{{#sigargs}}
		s->{{signame}}.{{siganame}} = {{sigargfromqt}};
{{/sigargs}}
		signalFromUIQ.enqueue(s);
	}
{{/fromUI}}

#ifdef USE_NOTIFICATIONS
#ifdef USE_INVOCATIONS
	Q_INVOKABLE void addInvokeRequestToNotification(bb::platform::Notification *  notification, QString target, QString action, QString mimeType, QString uri,     QString data) {
		bb::system::InvokeRequest invokeRequest;
		invokeRequest.setTarget(target);
		invokeRequest.setAction(action);
		invokeRequest.setMimeType(mimeType);
		invokeRequest.setUri(uri);
		invokeRequest.setData(data.toUtf8());
		notification->setInvokeRequest(invokeRequest);
	}
#endif
#endif

signals:
{{#toUI}}
	void {{signame}}({{#sigargs}}{{^sigargfirst}}, {{/sigargfirst}}{{qtsigargtype}}{{/sigargs}});
{{/toUI}}

#ifdef USE_INVOCATIONS
	void invoked(QString, QString, QString, QString, QString);

protected slots:
	void wasInvoked(const bb::system::InvokeRequest &req) {
		emit invoked(req.target(), req.action(), req.mimeType(), req.uri().toString(), QString::fromUtf8(req.data()));
	}
#endif

protected:
	QString qmlPath;
#ifdef USE_INVOCATIONS
	bb::system::InvokeManager invokeManager;
#endif
};

#ifdef USE_SENSORS
class AccelerometerHandler : public QObject {
Q_OBJECT

public:
	AccelerometerHandler(QtMobility::QAccelerometer::AccelerationMode accelM, QtMobility::QAccelerometer::AxesOrientationMode axesM, int (*cb)(double, double, double)) : _cb(cb) {
		_accel.setAccelerationMode(accelM);
		_accel.setAxesOrientationMode(axesM);

		connect(&_accel, SIGNAL(readingChanged()), SLOT(callback()));

		if(!_accel.connectToBackend()) {
			qCritical() << "CONNECT TO ACCELEROMETER BACKEND FAILED!";
		} else if(!_accel.start()) {
			qCritical() << "ACCELEROMETER START FAILED!";
		}
	}

public slots:
	void callback() {
		QtMobility::QAccelerometerReading *r = _accel.reading();
		if(!_cb((double)r->x(), (double)r->y(), (double)r->z())) {
			_accel.stop();
			delete this;
		}
	}

protected:
	QtMobility::QAccelerometer _accel;
	int (*_cb)(double, double, double);
};
#endif

extern "C" {

QObject *mainAppGlobal;

Q_DECL_EXPORT void emit_ToUIEvent(int signalEvent{{#toUItypes}}, {{lowcsigtype}} {{sigtypename}}{{/toUItypes}}) {
	QEvent *e = (QEvent *)new ToUIEvent(signalEvent{{#toUItypes}}, {{qtwrapsig}}{{/toUItypes}});
	QCoreApplication::postEvent(mainAppGlobal, e);
}

void destroySignalFromUI(SignalFromUI *s) {
	switch(s->tag) {
{{#fromUI}}
			case FROMUI_{{signame}}:
{{#sigargs}}
{{#sigargdestroy}}
				{{sigargdestroy}}(s->{{signame}}.{{siganame}});
{{/sigargdestroy}}
{{/sigargs}}
				break;
{{/fromUI}}
	}

	free(s);
}

SignalFromUI *lastFromUI = NULL;

Q_DECL_EXPORT SignalFromUI *pop_SignalFromUI(void) {
	if(lastFromUI) destroySignalFromUI(lastFromUI);
	lastFromUI = signalFromUIQ.dequeue();
	return lastFromUI;
}

Q_DECL_EXPORT int haskades_run(char *qml_path) {
	int argc = 0;
	char *argv[] = { NULL };
	// Instantiate the main application constructor.
	bb::cascades::Application app(argc, argv);

	// Set up the translator.
	QTranslator translator;
	QString locale_string = QLocale().name();
	QString filename = QString("sample_%1").arg(locale_string); // TODO
	if (translator.load(filename, "app/native/qm")) {
		app.installTranslator(&translator);
	}

	toUIEventType = (QEvent::Type)QEvent::registerEventType();

	// Initialize our application.
	AppWrapper mainApp(QString::fromUtf8(qml_path));
	mainAppGlobal = (QObject*)&mainApp;
	mainApp.ready();

	// We complete the transaction started in the main application constructor and start the
	// client event loop here. When loop is exited the Application deletes the scene which
	// deletes all its children.
	int status = bb::cascades::Application::exec();
	signalFromUIQ.stop();
	return status;
}

#ifdef USE_SENSORS
void accelerometer_start(int accelM, int axesM, int (*cb)(double, double, double)) {
	QtMobility::QAccelerometer::AccelerationMode _accelM;
	QtMobility::QAccelerometer::AxesOrientationMode _axesM;

	switch(accelM) {
		case 0:
			_accelM = QtMobility::QAccelerometer::Gravity;
			break;
		case 1:
			_accelM = QtMobility::QAccelerometer::User;
			break;
		case 2:
			_accelM = QtMobility::QAccelerometer::Combined;
			break;
		default:
			qWarning() << "Unknown AccelerationMode, defaulting to Combined";
			_accelM = QtMobility::QAccelerometer::Combined;
	}

	switch(axesM) {
		case 0:
			_axesM = QtMobility::QAccelerometer::FixedOrientation;
			break;
		case 1:
			_axesM = QtMobility::QAccelerometer::AutomaticOrientation;
			break;
		case 2:
			_axesM = QtMobility::QAccelerometer::UserOrientation;
			break;
		default:
			qWarning() << "Unknown AxesOrientationMode, defaulting to Automatic";
			_axesM = QtMobility::QAccelerometer::AutomaticOrientation;
	}

	new AccelerometerHandler(_accelM, _axesM, cb);
}
#endif

}

// Tell MOC to run on this file
#include "haskades_run.moc"
