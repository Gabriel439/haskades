{"name":"Haskades","tagline":"A high-level framework for BB10","body":"Haskades lets you write apps for the BlackBerry 10 platform with sweet Cascades-powered QML UIs, without needing to delve into C++.  Back-end code is written using the high-level [Haskell](http://haskell.org) language.  The only C++ is autogenerated.\r\n\r\n## Usage\r\n\r\n    ./haskades HaskadesBinding.hs haskades_run.cpp haskades_run.h < Types.hs\r\n\r\nWhere `Types.hs` is a Haskell source file containing a sum type declaration named `SignalToUI` and another named `SignalFromUI` which fully specify the communication possible between the UI and the backend.  QML code can access these signals on the `app` context object.  Haskell code can emit signals by using the `emit` function exported from the generated HaskadesBinding.  The `emit` call is threadsafe.\r\n\r\n[Text and Lazy Text](http://hackage.haskell.org/package/text), as well as standard `String` values all end up as `QString` in the QML, and vice-versa.  [UTCTime](http://hackage.haskell.org/package/time) becomes `QDateTime`. `Int`, `Double`, and `()` are passed through fairly directly.\r\n\r\n## Getting Haskades\r\n\r\nTo make effective use of Haskades, you will need to build a qnxnto-arm cross-compiler built from GHC HEAD.\r\n\r\nInstall the tool from Hackage:\r\n\r\n    $ cabal install haskades\r\n\r\nOr build it from source (requires [mustache2hs](http://hackage.haskell.org/package/mustache2hs)):\r\n\r\n    $ make && make install\r\n\r\nThis platform is still early, so let us know how it works for you.\r\n\r\n* Please report issues on [Github](https://github.com/singpolyma/haskades/issues).\r\n\r\n## Examples\r\n\r\n* [Simple starter app](https://github.com/singpolyma/haskades-sample)\r\n* [Template for a \"headlines\" app](https://github.com/singpolyma/haskades-headlines)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}